/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as ZimmerRouteImport } from './routes/zimmer'
import { Route as WellnessCenterRouteImport } from './routes/wellness-center'
import { Route as TermsOfServiceRouteImport } from './routes/terms-of-service'
import { Route as AccessebilityRouteImport } from './routes/accessebility'
import { Route as AboutRouteImport } from './routes/about'
import { Route as IndexRouteImport } from './routes/index'

const ZimmerRoute = ZimmerRouteImport.update({
  id: '/zimmer',
  path: '/zimmer',
  getParentRoute: () => rootRouteImport,
} as any)
const WellnessCenterRoute = WellnessCenterRouteImport.update({
  id: '/wellness-center',
  path: '/wellness-center',
  getParentRoute: () => rootRouteImport,
} as any)
const TermsOfServiceRoute = TermsOfServiceRouteImport.update({
  id: '/terms-of-service',
  path: '/terms-of-service',
  getParentRoute: () => rootRouteImport,
} as any)
const AccessebilityRoute = AccessebilityRouteImport.update({
  id: '/accessebility',
  path: '/accessebility',
  getParentRoute: () => rootRouteImport,
} as any)
const AboutRoute = AboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/accessebility': typeof AccessebilityRoute
  '/terms-of-service': typeof TermsOfServiceRoute
  '/wellness-center': typeof WellnessCenterRoute
  '/zimmer': typeof ZimmerRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/accessebility': typeof AccessebilityRoute
  '/terms-of-service': typeof TermsOfServiceRoute
  '/wellness-center': typeof WellnessCenterRoute
  '/zimmer': typeof ZimmerRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/accessebility': typeof AccessebilityRoute
  '/terms-of-service': typeof TermsOfServiceRoute
  '/wellness-center': typeof WellnessCenterRoute
  '/zimmer': typeof ZimmerRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/accessebility'
    | '/terms-of-service'
    | '/wellness-center'
    | '/zimmer'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/accessebility'
    | '/terms-of-service'
    | '/wellness-center'
    | '/zimmer'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/accessebility'
    | '/terms-of-service'
    | '/wellness-center'
    | '/zimmer'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  AccessebilityRoute: typeof AccessebilityRoute
  TermsOfServiceRoute: typeof TermsOfServiceRoute
  WellnessCenterRoute: typeof WellnessCenterRoute
  ZimmerRoute: typeof ZimmerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/zimmer': {
      id: '/zimmer'
      path: '/zimmer'
      fullPath: '/zimmer'
      preLoaderRoute: typeof ZimmerRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/wellness-center': {
      id: '/wellness-center'
      path: '/wellness-center'
      fullPath: '/wellness-center'
      preLoaderRoute: typeof WellnessCenterRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/terms-of-service': {
      id: '/terms-of-service'
      path: '/terms-of-service'
      fullPath: '/terms-of-service'
      preLoaderRoute: typeof TermsOfServiceRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/accessebility': {
      id: '/accessebility'
      path: '/accessebility'
      fullPath: '/accessebility'
      preLoaderRoute: typeof AccessebilityRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  AccessebilityRoute: AccessebilityRoute,
  TermsOfServiceRoute: TermsOfServiceRoute,
  WellnessCenterRoute: WellnessCenterRoute,
  ZimmerRoute: ZimmerRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
